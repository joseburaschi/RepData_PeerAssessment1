set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface==1,"blue")
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,col=c("green","blue","red","yellow","black","purple"))
?plotcluster
head(face)
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clnum=c(1,2,3,4,5,6),col=c("green","blue","red","yellow","black","purple"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clnum=c(1,2,3,4,5,6),col=c("green")
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clnum=c(1,2,3,4,5,6),col=c("green"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clnum=c(1,2,3,4,5,6),col=c("green"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clnum=c(1,2,3,4,5,6),col=c("green","red"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clnum=c(1,2,3,4,5,6),col=c("green","red","blue"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clnum=c(1,2,3,4,5,6),col=c("green","red","blue","black","purple","magenta"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1"/"black"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1/black"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1","blue"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1","2"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1","2"),col=c("blue","red"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1","2"),col=c("blue","green"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("3","2"),col=c("blue","green"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c("1","2","3"),col=c("blue","green","purple"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c(1,2,3),col=c("blue","green","purple"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c(4,2,3),col=c("blue","green","purple"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c(1,2,3,4),col=c("blue","green","purple"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(face,grface,clvecd=c(1,2,3,4),col=c("blue","green","purple","red"))
library(fpc)
set.seed(4634)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
face <- rFace(300,dMoNo=2,dNoEy=0)
grface <- as.integer(attr(face,"grouping"))
plotcluster(  face
, grface
, clvecd=c(1,2,3,4,5)
, col=c("blue","green","purple","red","yellow"))
x = readline('Hello?')
x
x = readline('Hello?')
x
?readline
if(interactive()) print("In interactive mode")
if(interactive())
print("In interactive mode")
else
print("Not in interactive mode")
if(interactive()) {}
print("In interactive mode")
} else {}
print("Not in interactive mode")
}
if(interactive()) {}
print("In interactive mode")
} else {
print("Not in interactive mode")
}
if(interactive()) {
print("In interactive mode")
} else {
print("Not in interactive mode")
}
?forest
?metafor
install.packages("metafor")
?forest
library(metafor)
?forest
data(dat.bcg)
par(mar=c(4,4,1,2))
res <- rma(ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg, measure="RR",
slab=paste(author, year, sep=", "), method="REML")
forest(res, xlim=c(-16, 6), at=log(c(.05, .25, 1, 4)), atransf=exp,
ilab=cbind(dat.bcg$tpos, dat.bcg$tneg, dat.bcg$cpos, dat.bcg$cneg),
ilab.xpos=c(-9.5,-8,-6,-4.5), cex=.75, ylim=c(-1, 27),
order=order(dat.bcg$alloc), rows=c(3:4,9:15,20:23),
xlab="Relative Risk", mlab="RE Model for All Studies", psize=1)
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
library(metafor)
### decrease margins so the full space is used
par(mar=c(4,4,1,2))
### load BCG vaccine data
data(dat.bcg)
### fit random-effects model (use slab argument to define study labels)
res <- rma(ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg, measure="RR",
slab=paste(author, year, sep=", "), method="REML")
### set up forest plot (with 2x2 table counts added; rows argument is used
### to specify exactly in which rows the outcomes will be plotted)
forest(res, xlim=c(-16, 6), at=log(c(.05, .25, 1, 4)), atransf=exp,
ilab=cbind(dat.bcg$tpos, dat.bcg$tneg, dat.bcg$cpos, dat.bcg$cneg),
ilab.xpos=c(-9.5,-8,-6,-4.5), cex=.75, ylim=c(-1, 27),
order=order(dat.bcg$alloc), rows=c(3:4,9:15,20:23),
xlab="Relative Risk", mlab="RE Model for All Studies", psize=1)
?hist
str(data)
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, header=T
, na.strings = "NA"
, quote="\""
, sep=",")
str(data)
data[!is.na(data$steps),]
str(data)
data[!is.na(data$steps) && is.na(data$interval),]
data[!is.na(data$steps) & is.na(data$interval),]
data[!is.na(data$steps) & is.na(data$date),]
data[is.na(data$date),]
data[is.na(data$interval),]
count(data[is.na(data$steps),])
count(data[is.na(data$date),])
count(data[is.na(data$interval),])
length(data[is.na(data$steps),])
install.packages("KernSmooth")
library(KernSmooth)
?lattice
?trellis
?trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(lattice)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
library(ggplot2)
ggplot(movies, aes(votes, rating))
head(movies)
?ggplot
ggplot(movies, aes(x = votes, y = rating))
library(ggplot2)
g <- ggplot(movies, aes(x = votes, y = rating))
g <- g + geom_line()
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
library(ggplot2)
qplot(votes, rating, data = movies) + geom_smooth()
getwd()
setwd("/Users/jaburaschi/DataScience/Coursera")
dir()
setwd("DS-ExploratoryDataAnalysis")
dir()
setwd("project2")
dir()
getwd()
dir()
dir()
setwd("exdata-data-NET_data")
dir()
setwd("exdata-data-NEI_data")
dir()
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- readRDS("summarySCC_PM25.rds")
head(NEI)
plot(NEI$year, NEI$Emissions)
choose(8,7)
choose(8,8)
ppois(10,15)
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, header=T
, na.strings = "NA"
, quote="\""
, sep=",")
getwd()
setwd("/Users/jaburaschi/DataScience/Coursera/DS-ReproducibleResearch/Project1/RepData_PeerAssessment1")
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, header=T
, na.strings = "NA"
, quote="\""
, sep=",")
str(data)
?mean
?aggregate
stepsPerDay = aggregate(x=data, by=date, fun=sum)
stepsPerDay = aggregate(x=data, by=date, FUN=sum)
stepsPerDay = aggregate(x=data, by=data$date, FUN=sum)
head(data)
stepsPerDay = aggregate(x=data, by=(date), FUN=sum)
stepsPerDay = aggregate(x=data, by=list(date), FUN=sum)
stepsPerDay = aggregate(x=data, by=c(date), FUN=sum)
stepsPerDay = aggregate(steps ~ date,x=data, FUN=sum)
stepsPerDay = aggregate(data$steps ~ data$date,x=data, FUN=sum)
class(data)
stepsPerDay <- aggregate(data$steps ~ data$date,x=data, FUN=sum)
stepsPerDay <- aggregate(steps ~ date,x=data, FUN=sum)
stepsPerDay <- aggregate(by=list(date),x=data, FUN=sum)
stepsPerDay <- aggregate(by=list(data$date),x=data, FUN=sum)
stepsPerDay <- aggregate(by=list(data$steps),x=data, FUN=sum)
stepsPerDay <- aggregate(by=list(data$steps),x=data, FUN=sum)
stepsPerDay <- aggregate(by=list(data$date),x=data, FUN=sum)
stepsPerDay <- aggregate(by=list(date),x=data, FUN=sum, na.rm = TRUE)
colnames(data) = c('steps','recorded_date','interval')
stepsPerDay <- aggregate(by=list(recorded_date),x=data, FUN=sum, na.rm = TRUE)
stepsPerDay <- aggregate(by=list(data$recorded_date),x=data, FUN=sum, na.rm = TRUE)
stepsPerDay <- aggregate(steps ~ recorded_date,x=data, FUN=sum, na.rm = TRUE)
stepsPerDay <- aggregate(by=list(recorded_date),x=data, FUN=sum, na.rm = TRUE)
stepsPerDay <- aggregate(by=list(data$recorded_date),x=data, FUN=sum, na.rm = TRUE)
stepsPerDay <- aggregate(data$steps, by=list(data$recorded_date), FUN=sum, na.rm = TRUE)
stepsPerDay
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, colNames = c("steps","date_recorded","interval")
, header=T
, na.strings = "NA"
, quote="\""
, sep=",")
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, colNames = c("steps","date_recorded","interval")
, header=F
, skiprows = 1
, na.strings = "NA"
, quote="\""
, sep=",")
?read.csv
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, colNames = c("steps","date_recorded","interval")
, header=F
, skip = 1
, na.strings = "NA"
, quote="\""
, blank.lines.skip = TRUE
, sep=",")
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, col.names = c("steps","date_recorded","interval")
, header=F
, skip = 1
, na.strings = "NA"
, quote="\""
, blank.lines.skip = TRUE
, sep=",")
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, col.names = c("steps","date_recorded","interval")
, header=F
, skip = 1
, na.strings = "NA"
, quote="\""
, blank.lines.skip = TRUE
, sep=",")
stepsPerDay <- aggregate(data$steps, by=list(data$recorded_date), FUN=sum, na.rm = TRUE)
colnames(stepsPerDay) = c("date_recorded","total_steps")
stepsPerDay <- aggregate(data$steps, by=list(data$recorded_date), FUN=sum, na.rm = TRUE)
data <- read.csv(  unz("activity.zip", "activity.csv")
, nrows=17570
, stringsAsFactors=F
, colClasses=c("numeric", "Date", "numeric")
, col.names = c("steps","date_recorded","interval")
, header=F
, skip = 1
, na.strings = "NA"
, quote="\""
, blank.lines.skip = TRUE
, sep=",")
stepsPerDay <- aggregate(data$steps, by=list(data$recorded_date), FUN=sum, na.rm = TRUE)
head(data)
stepsPerDay <- aggregate(data$steps, by=list(data$date_recorded), FUN=sum, na.rm = TRUE)
colnames(stepsPerDay) = c("date_recorded","total_steps")
hist(total_steps ~ date_recorded)
hist(total_steps ~ date_recorded, x = stepsPerDay)
?hist
hist(total_steps, x = stepsPerDay)
hist(stepsPerDay$total_steps)
mean(stepsPerDay)
mean(stepsPerDay$total_steps)
median(stepsPerDay$total_steps)
meanStepsPerInterval <- aggregate(data$steps, by=list(data$interval), FUN=mean, na.rm = TRUE)
head(meanStepsPerInterval)
colnames(stepsPerDay) = c("interval","average_steps")
head(meanStepsPerInterval)
colnames(meanStepsPerInterval) = c("interval","average_steps")
head(meanStepsPerInterval)
?plot
plot(x=meanStepsPerInterval$interval, y=meanStepsPerInterval$average_steps,type="l")
meanStepsPerInterval
max(meanStepsPerInterval)
max(meanStepsPerInterval$average_steps)
meanStepsPerInterval[ meanStepsPerInterval$average_steps == max(meanStepsPerInterval$average_steps), meanStepsPerInterval$interval]
meanStepsPerInterval[ meanStepsPerInterval$average_steps = max(meanStepsPerInterval$average_steps), meanStepsPerInterval$interval]
meanStepsPerInterval[ meanStepsPerInterval$average_steps==max(meanStepsPerInterval$average_steps),]
maxIntervalRow = meanStepsPerInterval[ meanStepsPerInterval$average_steps==max(meanStepsPerInterval$average_steps),]
maxIntervalRow[0]
maxIntervalRow[0][0]
maxIntervalRow[0,0]
maxIntervalRow[0][0]
maxIntervalRow
maxIntervalRow$interval
maxIntervalRow$average_steps
x = readline('Hello?')
if (length(dev.list()) > 0) {
dev.off(dev.list()["RStudioGD"])
}
library(metafor)
### decrease margins so the full space is used
par(mar=c(4,4,1,2))
### load BCG vaccine data
data(dat.bcg)
### fit random-effects model (use slab argument to define study labels)
res <- rma(ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg, measure="RR",
slab=paste(author, year, sep=", "), method="REML")
### set up forest plot (with 2x2 table counts added; rows argument is used
### to specify exactly in which rows the outcomes will be plotted)
forest(res, xlim=c(-16, 6), at=log(c(.05, .25, 1, 4)), atransf=exp,
ilab=cbind(dat.bcg$tpos, dat.bcg$tneg, dat.bcg$cpos, dat.bcg$cneg),
ilab.xpos=c(-9.5,-8,-6,-4.5), cex=.75, ylim=c(-1, 27),
order=order(dat.bcg$alloc), rows=c(3:4,9:15,20:23),
xlab="Relative Risk", mlab="RE Model for All Studies", psize=1)
fh <- file("household_power_consumption.txt")
ba <- read.table(text = grep("^[1,2]/2/2007", readLines(fh), value = TRUE), col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), sep = ";", header = TRUE)
hist(ba$Global_active_power, col = "red", main = paste("Global Active Power"), xlab = "Global Active Power (kilowatts)")
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
